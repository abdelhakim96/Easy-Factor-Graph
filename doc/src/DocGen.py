import os, shutil, subprocess, logging

class FileHandler:        
    def __init__(self, fileName=None):
        self.contents = []
        if not fileName == None:
            with open(fileName, errors='ignore') as f:
                self.contents = [line.strip() for line in f.readlines()]
    
    def at(self, lineNumber):
        return self.contents[lineNumber]
        
    def getContent(self):
        return '\n'.join(self.contents)
        
    def reprint(self, fileName):
        with open(fileName, 'w') as stream:
            stream.write(self.getContent())
    
    def replaceLine(self, involvedLine, toPut, instances = 0):
        indices = self.__findIndices(involvedLine, instances)
        for i in indices:
            self.contents[i] = toPut

    def removeLine(self, toRemove, instances = 0):
        indices = self.__findIndices(toRemove, instances)
        for c in range(0, len(indices), 1):
            self.contents.remove(toRemove)
    
    def addBefore(self, involvedLine, toPut, instances = 0):
        indices = self.__findIndices(involvedLine, instances)
        added = 0
        for i in indices:
            self.contents.insert(i + added, toPut)
            added = added + 1

    def addAfter(self, involvedLine, toPut, instances = 0):
        indices = self.__findIndices(involvedLine, instances)
        added = 0
        for i in indices:
            self.contents.insert(i + added + 1, toPut)
            added = added + 1
    
    def pushBack(self, toPut):
        self.contents.append(toPut)
    
    def pushFront(self, toPut):
        self.contents.insert(0, toPut)
        
    def __findIndices(self, involvedLine, instances):
        if(instances == 0):
            instances = len(self.contents)
        indices = []
        k = 0
        for l in self.contents:
            if(l == involvedLine):
                indices.append(k)
                if(len(indices) == instances):
                    break
            k += 1
        return indices

class CommandChain:
    def __init__(self, cwd=None):
        self.cwd = cwd
        self.chain = []

    def add(self, cmd):
        self.chain.append(cmd)
        return self
    
    def run(self):
        for cmd in self.chain:
            cmd_str = ' '.join(cmd)
            logging.info('COMMAND | `{}`{}'.format(cmd_str, '' if self.cwd == None else 'from `{}`'.format(self.cwd) ))
            hndlr = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, cwd=self.cwd)
            _, err = hndlr.communicate()
            if not hndlr.returncode == 0:
                msg = 'Something went wrong, reason: {}'.format(cmd_str, err)
                raise Exception(msg)

class Paths:
    DOC_ROOT_PATH = os.path.dirname(__file__)
    BUILD_PATH = os.path.join(DOC_ROOT_PATH, '..', 'build')
    TEX_PATH = os.path.join(BUILD_PATH, 'latex')
    HTML_PATH = os.path.join(BUILD_PATH, 'html')

def prepare():
    logging.info('clean up of the build folder')
    shutil.rmtree(Paths.BUILD_PATH, ignore_errors=True)
    os.makedirs(Paths.BUILD_PATH)
    shutil.copytree(os.path.join(Paths.DOC_ROOT_PATH, 'Chapter_additional'), os.path.join(Paths.BUILD_PATH, 'Chapter_additional'))
    shutil.copyfile(os.path.join(Paths.DOC_ROOT_PATH, 'additional_Sections.tex'), os.path.join(Paths.BUILD_PATH, 'additional_Sections.tex'))

def genDoxy():
    class SourcesScanner:
        def __init__(self, root):
            self.folders = []
            self.scan_(root)

        def scan_(self, folder):
            if not os.path.isdir(folder):
                return
            self.folders.append(folder)
            for name in os.listdir(folder):
                self.scan_(os.path.join(folder, name))
    
    logging.info('setting up doxy_config')
    source_paths = SourcesScanner(os.path.abspath(os.path.join('..', '..', 'src', 'header', 'EasyFactorGraph')))
    hndlr = FileHandler(os.path.join(Paths.DOC_ROOT_PATH, 'doxy_config'))
    to_find = 'INPUT                  = THE_SOURCES'
    to_put  = 'INPUT                  = {}'.format(' \\ \n                         '.join(source_paths.folders) )
    hndlr.replaceLine(to_find, to_put)
    hndlr.reprint(os.path.join(Paths.BUILD_PATH, 'doxy_config'))

    logging.info('generate doxygen docs')
    CommandChain(Paths.BUILD_PATH).add(["doxygen", "doxy_config"]).run()

def genPdf():
    logging.info('setup latex sources')
    texMain = os.path.join(Paths.TEX_PATH, 'refman.tex')
    texHandler = FileHandler(texMain)
    logging.debug('change footer')
    texHandler.removeLine("\\fancyfoot[RE]{\\fancyplain{}{\\bfseries\\scriptsize Generated by Doxygen }}", 1)
    texHandler.replaceLine("\\fancyfoot[LO]{\\fancyplain{}{\\bfseries\\scriptsize Generated by Doxygen }}",
                        "\\fancyfoot[RE]{\\fancyplain{}{\\bfseries\\scriptsize Casalino Andrea }} \n" +
                        "\\fancyfoot[LO]{\\fancyplain{}{\\bfseries\\scriptsize Casalino Andrea }}", 1)
    logging.debug('set additional packages')
    texHandler.addAfter("%===== C O N T E N T S =====" , 
                        "\\usepackage{graphicx,color, import} \n" +
                        "\\usepackage{amssymb, amsmath}", 1)
    logging.debug('authorship')
    texHandler.replaceLine("{\\large Generated by Doxygen 1.8.17}\\\\",
                        "{\\large Casalino Andrea } \\\\ \n" +
                        "{\\large andrecasa91@gmail.com } \\\\", 1)
    logging.debug('add additional Chapters')
    texHandler.addAfter("%--- Begin generated contents ---" , FileHandler("./additional_Sections.tex").getContent(), 1)
    texHandler.reprint(texMain)

    logging.info('generate pdf doc')    
    CommandChain(Paths.TEX_PATH).add(["pdflatex", "refman"]) \
                                .add(["makeindex", "refman.idx"]) \
                                .add(["pdflatex", "refman"]) \
                                .add(["pdflatex", "refman"]) \
                                .add(["pdflatex", "refman"]) \
                                .add(["makeindex", "refman.idx"]) \
                                .add(["pdflatex", "refman"]) \
                                .run()

def checkOut():
    logging.info('check out')

    logging.debug('copy generated pdf to root')
    shutil.copyfile(os.path.join(Paths.TEX_PATH, 'refman.pdf'), os.path.join(Paths.DOC_ROOT_PATH, '..', 'EFG_updated.pdf'))

    logging.debug('copy generated html to root')
    html_gen = os.path.join(Paths.DOC_ROOT_PATH, '..', 'html')
    shutil.rmtree(html_gen, ignore_errors=True)
    shutil.copytree(Paths.HTML_PATH, html_gen)

    logging.debug('remove uneeded files')
    shutil.rmtree(Paths.BUILD_PATH, ignore_errors=True)

def main():
    logging.basicConfig(format='%(asctime)s | %(levelname)s | %(message)s', level=logging.DEBUG)

    prepare()
    genDoxy()
    genPdf()
    checkOut()

if __name__ == '__main__':
    main()
